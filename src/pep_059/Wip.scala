package pep_059

object Wip {

  val filename = "src/pep_059/cipher1.txt"
  val encodedStream = io.Source.fromFile(filename).mkString.trim.split(",").map(_.toInt).toStream

  def solve() = {

    val passwords = for {
      a <- 'a' to 'z'
      b <- 'a' to 'z'
      c <- 'a' to 'z'
    } yield Seq(a.toInt, b.toInt, c.toInt)

    val decodeStreams: Seq[Stream[Int]] = for {
      p <- passwords
    } yield Stream.continually(p.toStream).flatten

    val decodedTries = for {
      decodeStream <- decodeStreams
    } yield (encodedStream zip decodeStream).map(t => t._1 ^ t._2)

    decodedTries.filter(_.take(100).map(_.toChar).mkString.count(c => ('a' to 'z').contains(c) || ('A' to 'Z').contains(c) || c == ' ') > 90).head.sum

    /*
      encodedStream.groupBy(_.toInt).mapValues(_.length).toList.sortBy(_._2).foreach(t => println(t._1.toString + "\t" + Stream.continually('#').take(t._2).toList.mkString))
      69	#
      52	#
      93	#
      78	#
      84	#
      89	#
      60	#
      92	#
      41	#
      64	#
      81	#
      91	#
      48	#
      40	#
      94	#
      56	##
      37	##
      38	##
      33	##
      65	##
      44	##
      39	##
      67	##
      83	##
      35	###
      87	###
      74	####
      32	####
      45	####
      59	####
      86	####
      31	####
      30	####
      85	#####
      72	#####
      75	#####
      4	  #####
      25	######
      26	######
      24	#########
      17	#########
      18	##########
      29	###########
      73	###########
      21	###############
      23	#################
      5	  #####################
      28	#####################
      27	#####################
      20	######################
      22	######################
      13	########################
      15	##########################
      12	###############################
      8	  ##################################
      19	###################################
      3	  #####################################
      14	######################################
      16	######################################
      9	  #########################################
      7	  #########################################
      0	  #################################################
      6	  #################################################
      11	######################################################
      10	############################################################
      2	  ############################################################
      1	  ###############################################################
      71	######################################################################
      68	#############################################################################
      79	######################################################################################


      encodedStream.groupBy(_.toInt).mapValues(_.length).toList.sortBy(_._2).reverse.take(3).map(_._1 ^ ' '.toInt).map(_.toChar)
      List(o, d, g)
     */

  }

}
